// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// User defines model for User.
type User struct {
	// DateOfBirth The date of birth of the user.
	DateOfBirth time.Time `json:"date_of_birth"`

	// Email The email address of the user.
	Email openapi_types.Email `json:"email"`

	// ExternalId The external ID of the user.
	ExternalId openapi_types.UUID `json:"external_id"`

	// Name The name of the user.
	Name string `json:"name"`
}

// SaveUserJSONRequestBody defines body for SaveUser for application/json ContentType.
type SaveUserJSONRequestBody = User

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Store user data into the database.
	// (POST /save)
	SaveUser(ctx echo.Context) error
	// Retrieve user data from the database.
	// (GET /{id})
	GetUser(ctx echo.Context, id openapi_types.UUID) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// SaveUser converts echo context to params.
func (w *ServerInterfaceWrapper) SaveUser(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SaveUser(ctx)
	return err
}

// GetUser converts echo context to params.
func (w *ServerInterfaceWrapper) GetUser(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetUser(ctx, id)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/save", wrapper.SaveUser)
	router.GET(baseURL+"/:id", wrapper.GetUser)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/7STTW/bMAyG/4rA7egl6dZdfBwGDL3u41QUhWLRjQpb0kjaWFD4vw9k3I80DoZh2MkK",
	"RT4i+b55gCb3JSdMwlA/ADc77L0dfzCSfgvlgiQRLRq84G1ub7eRZGcB5IZikZgT1PB9h05TXG6dpehB",
	"dugGRlpBBW2m3gvUBnonsUeoQPYFoQYWiukOpgqw97FbptuV8yEQMp+lHwBL5F+ClHx3G8MZ/pzgrj6f",
	"pQ9DDEvw5HtcpurNa9yr8qkCwp9DJAxQXx81OpOrp7GOVbh5YuXtPTYCk8JiavNpM9+QxtigK5THGJCd",
	"T8GxH5GtLxXPW3NROiWqC9xcBBWMSHwAXaw2q40OnQsmXyLU8MFCFRQvOzPLWsHmocyiX3WS106ugvbi",
	"RzSXHSZHlk857DWvyUkwWYkvpYuNFa3vWZ9+dKme3hK2UMOb9bON17OH14aejvcqNKAFuOTEB0u/31yc",
	"7snm5qFpkLkdum5vSwornfhyszktuEqj72Jw8yRum8Pesj8uZ88uY6QRySFRppWZgIe+97TX/UgmfJbF",
	"xSTZHKS/tp7xULB+iGHSJ+5wYclfUOYdF0++R0FiqK//0vpRc1TXRy/WYL483mz1Qpk//FmmmxMVNv9B",
	"+QVRbZWEQhFHDEcaz+penrFDyuLaPKTwj7p+nR9/IW1LuT+Rdpp+BwAA//9bziK2nwUAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
